
/* -------------------------------------------------------------------------
 * !!! AUTOMATICALLY GENERATED CODE !!!
 * -------------------------------------------------------------------------
 * This file was automatically generated by the OrangeBits compiler.  
 * Compiled on:  11/15/2012 9:17:30 PM
 * Compiled by: vestben-PC\vestben
 * Source: C:\Users\vestben\Documents\GitHub\cats-vs-codez\game\Game.coffee      
 * -------------------------------------------------------------------------*/


var activeWave, addGameView, addTitleView, blueButton, buttonArray, canvas, clearScreen, drawButtons, epicMap, g, greenButton, gridsize, handleClickity, handleFileLoad, handleLoadComplete, init, makeButtons, manifest, movingCube, orangeButton, redButton, resetGame, stage, startGame, theColor, theLine, tick, totalLoaded, towerGrid, uiCanvas, uiG, uiStage, vertical;

totalLoaded = 0;

manifest = [];

canvas = null;

stage = null;

uiCanvas = null;

uiStage = null;

theColor = "yellow";

greenButton = null;

orangeButton = null;

redButton = null;

blueButton = null;

theLine = 0;

activeWave = 0;

vertical = false;

gridsize = {
  x: 17,
  y: 13
};

movingCube = {
  x: 0.0,
  y: 3.0
};

buttonArray = new Array();

towerGrid = new Array();

epicMap = new Map(gridsize, movingCube);

g = new Graphics();

uiG = new Graphics();

init = function() {
  var shape, uiShape;
  canvas = document.getElementById('gameCanvas');
  stage = new Stage(canvas);
  shape = new Shape(g);
  stage.addChild(shape);
  uiCanvas = document.getElementById('uiCanvas');
  uiStage = new Stage(uiCanvas);
  uiShape = new Shape(uiG);
  uiStage.addChild(uiShape);
  stage.mouseEventsEnabled = true;
  canvas.onclick = handleClickity;
  uiStage.mouseEventsEnabled = true;
  uiCanvas.onclick = handleClickity;
  makeButtons();
  drawButtons();
  epicMap.drawNextBranch(2);
  Ticker.setFPS(30);
  Ticker.addListener(this);
  return stage.update();
};

handleClickity = function() {
  var button, _i, _len;
  for (_i = 0, _len = buttonArray.length; _i < _len; _i++) {
    button = buttonArray[_i];
    if (button.handleClick(uiStage.mouseX, uiStage.mouseY)) {
      if (button.color === "orange") {
        if (activeWave <= 2) {
          activeWave += 1;
          epicMap.drawNextBranch(activeWave);
        }
        return;
      } else {
        theColor = button.color;
        return;
      }
    }
  }
  return epicMap.checkSquare(stage.mouseX, stage.mouseY);
};

handleFileLoad = function(e) {
  var img;
  console.log("handling");
  switch (e.type) {
    case PreloadJS.IMAGE:
      img = new Image();
      img.src = e.src;
      img.onload = handleLoadComplete;
      window[e.id] = new Bitmap(img);
      break;
    case PreloadJS.SOUND:
      handleLoadComplete();
      break;
  }
};

handleLoadComplete = function(e) {
  totalLoaded++;
  if (manifest.length === totalLoaded) return addTitleView();
};

addTitleView = function() {};

clearScreen = function() {
  g.clear();
  return g.setStrokeStyle(1).beginStroke("White").beginFill("White").drawRect(0, 0, canvas.width, canvas.height, 0);
};

addGameView = function() {
  console.log("gamederp");
  return stage.update();
};

makeButtons = function() {
  var greyButton, nextWaveButton, pinkButton, purpleButton, yellowButton;
  purpleButton = new MenuButton(125, 700, 100, 100, "purple");
  pinkButton = new MenuButton(250, 700, 100, 100, "pink");
  yellowButton = new MenuButton(375, 700, 100, 100, "yellow");
  greyButton = new MenuButton(500, 700, 100, 100, "grey");
  nextWaveButton = new MenuButton(750, 700, 100, 100, "orange");
  return buttonArray = [purpleButton, pinkButton, yellowButton, greyButton, nextWaveButton];
};

drawButtons = function() {
  var button, _i, _len, _results;
  _results = [];
  for (_i = 0, _len = buttonArray.length; _i < _len; _i++) {
    button = buttonArray[_i];
    _results.push(button.tick());
  }
  return _results;
};

startGame = function() {};

resetGame = function() {};

tick = function() {
  if (uiStage) uiStage.update();
  clearScreen();
  epicMap.tick();
  return stage.update();
};
